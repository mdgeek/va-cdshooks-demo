<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/security
        https://www.springframework.org/schema/security/spring-security.xsd
        http://cxf.apache.org/jaxrs
        http://cxf.apache.org/schemas/jaxrs.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="edu.utah.kmm"/>
    <context:property-placeholder
            ignore-resource-not-found="false"
            location="@cdshooks-demo.property.file@" />

    <jaxrs:server address="/cdshooks-proxy">
        <jaxrs:serviceBeans>
            <bean class="edu.utah.kmm.va.cdshooks.proxy.CDSHooksProxy" />
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="corsFilter" />
        </jaxrs:providers>
    </jaxrs:server>

    <!-- BEGIN: CONFIGURATION -->
    <bean id="jaxbContextService" class="org.opencds.config.api.xml.JAXBContextService" />

    <bean id="cacheService" class="org.opencds.config.service.CacheServiceImpl" />

    <bean id="configData" class="org.opencds.config.api.ConfigData">
        <property name="configType" value="\${knowledge-repository.type}" />
        <property name="configPath" value="\${knowledge-repository.path}" />
        <property name="kmThreads" value="\${km.threads:1}" />
    </bean>

    <bean id="configurationService" class="org.opencds.config.api.ConfigurationService">
        <constructor-arg name="configStrategies">
            <util:set>
                <bean class="org.opencds.config.file.FileConfigStrategy" />
                <bean class="edu.utah.kmm.opencds.config.ClasspathConfigStrategy" />
            </util:set>
        </constructor-arg>
        <constructor-arg name="cacheService" ref="cacheService" />
        <constructor-arg name="configData" ref="configData" />
    </bean>
    <!-- END: CONFIGURATION -->

    <!-- utilities -->
    <bean id="callableUtil" class="org.opencds.evaluation.service.util.CallableUtilImpl" />

    <bean id="evaluationService" class="org.opencds.evaluation.service.EvaluationServiceImpl">
        <constructor-arg name="callableUtil" ref="callableUtil" />
    </bean>

    <!-- END : REST : CDS Hooks Support -->

    <bean id="resourceListBuilder" class="org.opencds.hooks.evaluation.service.ResourceListBuilder" />

    <!-- END : REST : CDS Hooks Support -->

    <bean id="corsFilter" class="org.opencds.hooks.services.cors.CorsFilter" />

    <bean id="contentLengthInterceptor" class="org.opencds.hooks.services.content.ContentLengthFilter" />

    <!-- BEGIN : REST : R4 FHIR Support -->
    <bean id="r4JsonUtil" class="org.opencds.hooks.model.r4.util.R4JsonUtil" />

    <bean id="r4HookEvaluation" class="org.opencds.hooks.evaluation.service.HookEvaluation">
        <constructor-arg name="configurationService" ref="configurationService" />
        <constructor-arg name="evaluationService" ref="evaluationService" />
        <constructor-arg name="resourceListBuilder" ref="resourceListBuilder" />
        <constructor-arg name="fhirVersion" value="R4" />
    </bean>

    <bean id="r4CdsHooksService" class="org.opencds.hooks.services.CDSHooksService">
        <constructor-arg name="configurationService" ref="configurationService" />
        <constructor-arg name="hookEvaluation" ref="r4HookEvaluation" />
        <constructor-arg name="jsonUtil" ref="r4JsonUtil" />
    </bean>

    <jaxrs:server id="r4HooksRESTService" address="/r4/hooks">
        <jaxrs:serviceBeans>
            <ref bean="r4CdsHooksService" />
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="corsFilter" />
            <ref bean="contentLengthInterceptor" />
        </jaxrs:providers>
    </jaxrs:server>


    <!-- BEGIN : REST : Configuration Services -->

    <bean id="configurationReloadRestService" class="org.opencds.config.service.rest.ConfigurationReloadRestService">
        <constructor-arg name="configurationService" ref="configurationService" />
    </bean>

    <bean id="logRestService" class="org.opencds.config.service.rest.LogRestService" />

    <jaxrs:server id="configurationRESTService" address="/config/v1">
        <jaxrs:serviceBeans>
            <ref bean="configurationReloadRestService" />
            <ref bean="logRestService" />
        </jaxrs:serviceBeans>
    </jaxrs:server>

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg name="strength" value="15" />
    </bean>

    <bean id="userDetailsService" class="edu.utah.kmm.opencds.security.UserDetailsServiceExImpl">
        <constructor-arg name="jaxbContextService" ref="jaxbContextService" />
        <constructor-arg name="location" value="@config.security@" />
        <constructor-arg name="passwordEncoder" ref="passwordEncoder" />
    </bean>


    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <constructor-arg>
            <list>
                <security:filter-chain pattern="/config/**" filters="basicAuthenticationFilter" />
            </list>
        </constructor-arg>
    </bean>

    <!-- To allow public access by default and to set authentication mode to basic login/password -->
    <security:http create-session="stateless" realm="OpenCDS Configuration Service"
                   use-expressions="true" authentication-manager-ref="authenticationManager">
        <!-- <security:intercept-url pattern="/config/**" method="GET" access="ROLE_CONFIG_USER" /> -->
        <security:intercept-url pattern="/WEB-INF/config" access="hasRole('ROLE_CONFIG_ADMIN')" />
        <security:http-basic entry-point-ref="authenticationEntryPoint" />
    </security:http>

    <!-- To create user/password with roles -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <property name="realmName" value="OpenCDS Configuration Service" />
    </bean>

    <bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <constructor-arg name="authenticationManager" ref="authenticationManager" />
        <constructor-arg name="authenticationEntryPoint" ref="authenticationEntryPoint" />
    </bean>

    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleHierarchyVoter">
        <constructor-arg ref="roleHierarchy" />
    </bean>

    <bean id="roleHierarchy" class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
        <property name="hierarchy">
            <value>
                ROLE_CONFIG_ADMIN > ROLE_CONFIG_USER
            </value>
        </property>
    </bean>

    <!-- END : REST : Configuration Services -->

    <!-- Plugin configuration and dependencies -->

</beans>
